using System.Text;
using API.Data;
using API.Entities;
using API.Interfaces;
using API.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;

namespace API.Extensions
{
    public static class IdentityServiceExtensions
    {
        public static IServiceCollection AddIdentityServices(this IServiceCollection services, IConfiguration config){
            
            //1. we add another service, for the identity, to the collection 
            // * one option is the AddIdentity<>.
            // * if we had an MVC app  with Razor Pages (client served by .NET) [explain MVC + Razor Pages]
            // * this was enough, we've had the full setup: pages we need, cookie based authentication (user mantaing session, because the HTML is generated by the server),
            // * we are using SPA and our authorization is token based
            // * so we'll use the other option, AddIdentityCore<>,
            // * it'll give us the basics but we'll have to add extra stuff:
            services.AddIdentityCore<AppUser>(ops => {
                //2. as u can see, ops allow different configurations,
                // * by default, Identity require complex passwords
                // * for example, we don't want that, so:
                ops.Password.RequireNonAlphanumeric = false;
                //3. if u want you can look at the different options here
            })
            //4. we want to use roles in our app
            .AddRoles<AppRole>()
            //5. need to add the role manager (inline doc for explanation)
            .AddRoleManager<RoleManager<AppRole>>()
            //6. also we need the signing in manager that uses the AppUser
            .AddSignInManager<SignInManager<AppUser>>()
            //7. we also need the validation of roles, to work with AppRole as the role type
            .AddRoleValidator<RoleValidator<AppRole>>()
            //8. and all the above need to be stored in a persistent way, right? so we add the store:
            .AddEntityFrameworkStores<DataContext>();
            //9. back to README.md

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            .AddJwtBearer(options => {
                options.TokenValidationParameters = new TokenValidationParameters{
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config["TokenKey"])),
                    ValidateIssuer = false, 
                    ValidateAudience = false  
                };
            });
            return services;
        }
    }
}